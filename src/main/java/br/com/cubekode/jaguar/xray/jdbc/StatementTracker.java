package br.com.cubekode.jaguar.xray.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import br.com.cubekode.jaguar.xray.CodeTrace;
import br.com.cubekode.jaguar.xray.ThreadTracker;

public class StatementTracker implements Statement {

	private ConnectionTracker ct;
	private Statement st;

	public StatementTracker(ConnectionTracker ct, Statement st) {
		this.ct = ct;
		this.st = st;
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		CodeTrace trace = ThreadTracker.trace("JDBC-SQL-executeQuery-" + sql);
		try {
			return trace.finishReturn(st.executeQuery(sql));
		} catch (SQLException e) {
			trace.finish(e);
			throw e;
		} catch (RuntimeException e) {
			trace.finish(e);
			throw e;
		}
	}

	public int executeUpdate(String sql) throws SQLException {
		CodeTrace trace = ThreadTracker.trace("JDBC-SQL-executeUpdate-" + sql);
		try {
			return trace.finishReturn(st.executeUpdate(sql));
		} catch (SQLException e) {
			trace.finish(e);
			throw e;
		} catch (RuntimeException e) {
			trace.finish(e);
			throw e;
		}
	}

	public void close() throws SQLException {
		st.close();
	}

	public int getMaxFieldSize() throws SQLException {
		return st.getMaxFieldSize();
	}

	public void setMaxFieldSize(int max) throws SQLException {
		st.setMaxFieldSize(max);
	}

	public int getMaxRows() throws SQLException {
		return st.getMaxRows();
	}

	public void setMaxRows(int max) throws SQLException {
		st.setMaxRows(max);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		st.setEscapeProcessing(enable);
	}

	public int getQueryTimeout() throws SQLException {
		return st.getQueryTimeout();
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		st.setQueryTimeout(seconds);
	}

	public void cancel() throws SQLException {
		st.cancel();
	}

	public SQLWarning getWarnings() throws SQLException {
		return st.getWarnings();
	}

	public void clearWarnings() throws SQLException {
		st.clearWarnings();
	}

	public void setCursorName(String name) throws SQLException {
		st.setCursorName(name);
	}

	public boolean execute(String sql) throws SQLException {
		CodeTrace trace = ThreadTracker.trace("JDBC-SQL-execute-" + sql);
		try {
			return trace.finishReturn(st.execute(sql));
		} catch (SQLException e) {
			trace.finish(e);
			throw e;
		} catch (RuntimeException e) {
			trace.finish(e);
			throw e;
		}
	}

	public ResultSet getResultSet() throws SQLException {
		return st.getResultSet();
	}

	public int getUpdateCount() throws SQLException {
		return st.getUpdateCount();
	}

	public boolean getMoreResults() throws SQLException {
		return st.getMoreResults();
	}

	public void setFetchDirection(int direction) throws SQLException {
		st.setFetchDirection(direction);
	}

	public int getFetchDirection() throws SQLException {
		return st.getFetchDirection();
	}

	public void setFetchSize(int rows) throws SQLException {
		st.setFetchSize(rows);
	}

	public int getFetchSize() throws SQLException {
		return st.getFetchSize();
	}

	public int getResultSetConcurrency() throws SQLException {
		return st.getResultSetConcurrency();
	}

	public int getResultSetType() throws SQLException {
		return st.getResultSetType();
	}

	public void addBatch(String sql) throws SQLException {
		st.addBatch(sql);
	}

	public void clearBatch() throws SQLException {
		st.clearBatch();
	}

	public int[] executeBatch() throws SQLException {
		CodeTrace trace = ThreadTracker.trace("JDBC-SQL-executeBatch");
		try {
			return trace.finishReturn(st.executeBatch());
		} catch (SQLException e) {
			trace.finish(e);
			throw e;
		} catch (RuntimeException e) {
			trace.finish(e);
			throw e;
		}
	}

	public Connection getConnection() throws SQLException {
		return ct;
	}

	public boolean getMoreResults(int current) throws SQLException {
		return st.getMoreResults(current);
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return st.getGeneratedKeys();
	}

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		CodeTrace trace = ThreadTracker.trace("JDBC-SQL-executeUpdate-" + sql);
		try {
			return trace.finishReturn(st.executeUpdate(sql, autoGeneratedKeys));
		} catch (SQLException e) {
			trace.finish(e);
			throw e;
		} catch (RuntimeException e) {
			trace.finish(e);
			throw e;
		}
	}

	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		CodeTrace trace = ThreadTracker.trace("JDBC-SQL-executeUpdate-" + sql);
		try {
			return trace.finishReturn(st.executeUpdate(sql, columnIndexes));
		} catch (SQLException e) {
			trace.finish(e);
			throw e;
		} catch (RuntimeException e) {
			trace.finish(e);
			throw e;
		}
	}

	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		CodeTrace trace = ThreadTracker.trace("JDBC-SQL-executeUpdate-" + sql);
		try {
			return trace.finishReturn(st.executeUpdate(sql, columnNames));
		} catch (SQLException e) {
			trace.finish(e);
			throw e;
		} catch (RuntimeException e) {
			trace.finish(e);
			throw e;
		}
	}

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		CodeTrace trace = ThreadTracker.trace("JDBC-SQL-execute-" + sql);
		try {
			return trace.finishReturn(st.execute(sql, autoGeneratedKeys));
		} catch (SQLException e) {
			trace.finish(e);
			throw e;
		} catch (RuntimeException e) {
			trace.finish(e);
			throw e;
		}
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		CodeTrace trace = ThreadTracker.trace("JDBC-SQL-execute-" + sql);
		try {
			return trace.finishReturn(st.execute(sql, columnIndexes));
		} catch (SQLException e) {
			trace.finish(e);
			throw e;
		} catch (RuntimeException e) {
			trace.finish(e);
			throw e;
		}
	}

	public boolean execute(String sql, String[] columnNames) throws SQLException {
		CodeTrace trace = ThreadTracker.trace("JDBC-SQL-execute-" + sql);
		try {
			return trace.finishReturn(st.execute(sql, columnNames));
		} catch (SQLException e) {
			trace.finish(e);
			throw e;
		} catch (RuntimeException e) {
			trace.finish(e);
			throw e;
		}
	}

	public int getResultSetHoldability() throws SQLException {
		return st.getResultSetHoldability();
	}

	public boolean isClosed() throws SQLException {
		return st.isClosed();
	}

	public void setPoolable(boolean poolable) throws SQLException {
		st.setPoolable(poolable);
	}

	public boolean isPoolable() throws SQLException {
		return st.isPoolable();
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return st.unwrap(iface);
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return st.isWrapperFor(iface);
	}
}
